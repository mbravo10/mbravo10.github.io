{"version":3,"sources":["components/Square.js","components/Gamestatus.js","components/Logic.js","components/Gamewinner.js","components/Resetbutton.js","components/Gameboard.js","App.js","reportWebVitals.js","index.js"],"names":["Square","props","className","onClick","disabled","isDisabled","val","Gamestatus","OverlayTrigger","overlay","Tooltip","id","Badge","variant","currentP","winner","arr","lines","i","length","a","b","c","Gamewinner","Alert","Winner","values","ResetButton","useState","show","setShow","handleClose","Button","as","type","value","Modal","onHide","Header","closeButton","Title","Body","Footer","Gameboard","state","Array","fill","isXsTurn","baseState","prevProps","prevState","this","gameArray","map","x","index","renderSquare","setState","square","slice","handleClick","Container","fluid","Jumbotron","style","backgroundColor","color","background","Row","Col","handleReset","React","Component","SELECTIONS","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b91b3600.chunk.js","sourcesContent":["import \"./styles/gameboard.css\";\n\nexport default function Square(props) {\n  return (\n    <button className=\"box\" onClick={props.onClick} disabled={props.isDisabled}>\n      {props.val}\n    </button>\n  );\n}\n","import { Badge, OverlayTrigger, Tooltip } from \"react-bootstrap\";\n\nexport default function Gamestatus(props) {\n  return (\n    <OverlayTrigger overlay={<Tooltip id=\"tooltip-disabled\">Play!</Tooltip>}>\n      <span className=\"d-inline-block\">\n        <h1>\n          <Badge variant=\"info\">\n            {`Current player: ${props.currentP ? \"X\" : \"O\"}`}\n          </Badge>\n        </h1>\n      </span>\n    </OverlayTrigger>\n  );\n}\n","export default function winner(arr) {\n  const lines = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n    [1, 4, 7],\n    [2, 5, 8],\n    [3, 6, 9],\n    [1, 5, 9],\n    [3, 5, 7],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (arr[a] && arr[a] === arr[b] && arr[a] === arr[c]) {\n      return arr[a];\n    }\n  }\n  return null;\n}\n","import Alert from \"react-bootstrap/Alert\";\nimport Winner from \"./Logic\";\n\nexport default function Gamewinner(props) {\n  return (\n    <Alert variant=\"info\">\n      {Winner(props.values)\n        ? `Winner is ${Winner(props.values)}`\n        : \"No winner yet\"}\n    </Alert>\n  );\n}\n","import { Button, Modal } from \"react-bootstrap\";\nimport { useState } from \"react\";\n\nexport default function ResetButton(props) {\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <Button as=\"input\" type=\"reset\" value=\"Reset\" onClick={handleShow} />\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Reset Game?</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>Are you sure you want to reset?</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            No\n          </Button>\n          <Button variant=\"primary\" onClick={props.onClick}>\n            Yes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n","import { Container, Jumbotron, Button, Row, Col } from \"react-bootstrap\";\nimport React from \"react\";\nimport Square from \"./Square\";\nimport Gamestatus from \"./Gamestatus\";\nimport Gamewinner from \"./Gamewinner\";\nimport Resetbutton from \"./Resetbutton\";\nimport \"./styles/gameboard.css\";\nimport winner from \"./Logic\";\n\nexport default class Gameboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: Array(9).fill(null),\n      isXsTurn: true,\n      isDisabled: false,\n    };\n\n    this.baseState = this.state;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.value !== this.state.value) {\n      return (\n        <div className=\"game-board\">\n          {this.props.gameArray.map((x, index) => this.renderSquare(x, index))}\n        </div>\n      );\n    }\n  }\n\n  handleReset() {\n    this.setState(this.baseState);\n  }\n\n  handleClick(i) {\n    const square = this.state.value.slice();\n    this.state.isXsTurn ? (square[i] = \"X\") : (square[i] = \"O\");\n    this.setState({ value: square, isXsTurn: !this.state.isXsTurn });\n    if (winner(square)) this.setState({ isDisabled: true });\n  }\n\n  renderSquare(i, index) {\n    return (\n      <Square\n        key={index}\n        val={this.state.value[i]}\n        isDisabled={this.state.isDisabled}\n        onClick={() => {\n          this.handleClick(i);\n        }}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <Container fluid=\"true\">\n        <Jumbotron style={{ backgroundColor: \"#0B0C10\", color: \"#45A29E\" }}>\n          <h1>Hello, world!</h1>\n          <p>\n            This is a simple hero unit, a simple jumbotron-style component for\n            calling extra attention to featured content or information.\n          </p>\n          <p>\n            <Button style={{ background: \"#45A29E\" }}>Learn more</Button>\n          </p>\n        </Jumbotron>\n        <Row className=\"justify-content-md-center\">\n          <Row>\n            <Col>\n              <div className=\"game-board\">\n                {this.props.gameArray.map((x, index) =>\n                  this.renderSquare(x, index)\n                )}\n              </div>\n            </Col>\n            <Col>\n              <Gamestatus currentP={this.state.isXsTurn} />\n              <Gamewinner values={this.state.value} />\n              <Resetbutton onClick={() => this.handleReset()} />\n            </Col>\n          </Row>\n        </Row>\n      </Container>\n    );\n  }\n}\n","import Gameboard from \"./components/Gameboard\";\nimport \"./App.css\";\n\nconst SELECTIONS = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nfunction App() {\n  return <Gameboard gameArray={SELECTIONS} />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}