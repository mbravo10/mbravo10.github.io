{"version":3,"sources":["components/Square.js","components/Gamestatus.js","components/Logic.js","components/Gamewinner.js","components/Resetbutton.js","components/Jumboheader.js","components/Gameboard.js","App.js","reportWebVitals.js","index.js"],"names":["Square","props","className","onClick","disabled","isDisabled","val","Gamestatus","OverlayTrigger","overlay","Tooltip","id","Badge","variant","currentP","winner","arr","lines","i","length","a","b","c","Gamewinner","Alert","Winner","values","ResetButton","useState","show","setShow","handleClose","Button","as","type","value","Modal","onHide","Body","Footer","Jumboheaders","data","setData","useEffect","fetch","headers","Accept","then","response","console","log","json","myJson","gameName","gamePlayer","Gameboard","state","xWins","oWins","Array","fill","isXsTurn","isLoading","baseState","startState","this","setState","square","slice","index","handleClick","Container","Jumbotron","style","backgroundColor","color","boxShadow","Row","Col","Toast","window","location","reload","marginTop","gameArray","map","x","renderSquare","Card","handleReset","React","Component","SELECTIONS","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f697b82c.chunk.js","sourcesContent":["import \"./styles/gameboard.css\";\n\nexport default function Square(props) {\n  return (\n    <button className=\"box\" onClick={props.onClick} disabled={props.isDisabled}>\n      {props.val}\n    </button>\n  );\n}\n","import { Badge, OverlayTrigger, Tooltip } from \"react-bootstrap\";\n\nexport default function Gamestatus(props) {\n  return (\n    <OverlayTrigger overlay={<Tooltip id=\"tooltip-disabled\">Play!</Tooltip>}>\n      <span className=\"d-inline-block\">\n        <h1>\n          <Badge variant=\"info\">\n            {`Current player: ${props.currentP ? \"❌\" : \"⭕️\"}`}\n          </Badge>\n        </h1>\n      </span>\n    </OverlayTrigger>\n  );\n}\n","export default function winner(arr) {\n  const lines = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n    [1, 4, 7],\n    [2, 5, 8],\n    [3, 6, 9],\n    [1, 5, 9],\n    [3, 5, 7],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (arr[a] && arr[a] === arr[b] && arr[a] === arr[c]) {\n      return arr[a];\n    }\n  }\n  return null;\n}\n","import Alert from \"react-bootstrap/Alert\";\nimport Winner from \"./Logic\";\n\nexport default function Gamewinner(props) {\n  return (\n    <Alert variant={Winner(props.values) ? \"success\" : \"info\"}>\n      {Winner(props.values)\n        ? `Congratulations player ${Winner(props.values)}!`\n        : \"No winner yet\"}\n    </Alert>\n  );\n}\n","import { Button, Modal } from \"react-bootstrap\";\nimport { useState } from \"react\";\n\nexport default function ResetButton(props) {\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <Button\n        as=\"input\"\n        type=\"reset\"\n        value=\"Reset\"\n        disabled={show}\n        onClick={handleShow}\n      />\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Body>Are you sure you want to reset?</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            No\n          </Button>\n          <Button\n            variant=\"primary\"\n            onClick={() => {\n              props.onClick();\n              handleClose();\n            }}\n          >\n            Yes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\n\nexport default function Jumboheaders() {\n  const [data, setData] = useState(\"Nothing\");\n  const getData = () => {\n    fetch(\"/data.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    })\n      .then(function (response) {\n        console.log(response);\n        return response.json();\n      })\n      .then(function (myJson) {\n        console.log(myJson);\n        setData(myJson);\n      });\n  };\n  useEffect(() => getData(), []);\n\n  return (\n    <html>\n      <h1>{data.gameName}</h1>\n      <h4>Welcome, {data.gamePlayer}</h4>\n    </html>\n  );\n}\n","import {\n  Container,\n  Jumbotron,\n  Row,\n  Col,\n  Card,\n  Toast,\n  Button,\n} from \"react-bootstrap\";\nimport React from \"react\";\nimport Square from \"./Square\";\nimport Gamestatus from \"./Gamestatus\";\nimport Gamewinner from \"./Gamewinner\";\nimport Resetbutton from \"./Resetbutton\";\nimport Winner from \"./Logic\";\nimport \"./styles/gameboard.css\";\nimport Jumboheaders from \"./Jumboheader\";\n\nexport default class Gameboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      xWins: 0,\n      oWins: 0,\n      value: Array(9).fill(null),\n      isXsTurn: true,\n      isDisabled: false,\n      isLoading: false,\n    };\n    const { xWins, oWins, ...baseState } = this.state;\n    this.startState = baseState;\n  }\n\n  handleReset() {\n    this.setState(this.startState);\n  }\n\n  handleClick(i) {\n    const square = this.state.value.slice();\n    if (square[i]) return;\n    this.state.isXsTurn ? (square[i] = \"❌\") : (square[i] = \"⭕️\");\n    this.setState({ value: square, isXsTurn: !this.state.isXsTurn });\n    if (Winner(square)) {\n      this.setState({ isDisabled: true });\n      this.state.isXsTurn\n        ? this.setState({ xWins: this.state.xWins + 1 })\n        : this.setState({ oWins: this.state.oWins + 1 });\n    }\n  }\n\n  renderSquare(i, index) {\n    return (\n      <Square\n        key={index}\n        val={this.state.value[i]}\n        isDisabled={this.state.isDisabled}\n        onClick={() => {\n          this.handleClick(i);\n        }}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <Container>\n        <Jumbotron\n          style={{\n            backgroundColor: \"#1f2833\",\n            color: \"#45A29E\",\n            boxShadow: \"5px 20px 30px #1f2833\",\n          }}\n        >\n          <Jumboheaders />\n          <Row>\n            <Col>\n              <Toast>\n                <Toast.Body>{`Player ❌ wins : ${this.state.xWins}`}</Toast.Body>\n              </Toast>\n            </Col>\n            <Col>\n              <Toast>\n                <Toast.Body>{`Player ⭕️ wins : ${this.state.oWins}`}</Toast.Body>\n              </Toast>\n            </Col>\n          </Row>\n          <Button\n            variant=\"primary\"\n            onClick={() => window.location.reload()}\n            style={{ marginTop: \"10px\" }}\n          >\n            Reset Board and Winners\n          </Button>\n        </Jumbotron>\n        <Row className=\"justify-content-md-center\">\n          <Col>\n            <div className=\"game-board\">\n              {this.props.gameArray.map((x, index) =>\n                this.renderSquare(x, index)\n              )}\n            </div>\n          </Col>\n          <Col>\n            <Card\n              style={{\n                backgroundColor: \"#1f2933\",\n                boxShadow: \"5px 20px 30px #1f2833\",\n              }}\n            >\n              <Card.Body>\n                <Gamestatus currentP={this.state.isXsTurn} />\n                <Gamewinner values={this.state.value} />\n                <Resetbutton onClick={() => this.handleReset()} />\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n","import Gameboard from \"./components/Gameboard\";\nimport \"./App.css\";\n\nconst SELECTIONS = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nfunction App() {\n  return <Gameboard gameArray={SELECTIONS} />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}