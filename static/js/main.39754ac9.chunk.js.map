{"version":3,"sources":["components/Square.js","components/Gameboard.js","App.js","reportWebVitals.js","index.js"],"names":["Square","props","class","onClick","val","Gameboard","state","value","Array","fill","isXsTurn","i","square","this","slice","setState","handleClick","Container","fluid","Jumbotron","Button","variant","Row","className","Col","md","renderSquare","React","Component","SELECTIONS","App","gameArray","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iTAEe,SAASA,EAAOC,GAC3B,OAAO,yBAAQC,MAAM,MAAMC,QAASF,EAAME,QAAnC,cAA8CF,EAAMG,IAApD,O,ICGUC,E,kDACjB,WAAYJ,GAAQ,IAAD,8BACf,cAAMA,IACDK,MAAQ,CACXC,MAAOC,MAAM,GAAGC,KAAK,MACrBC,UAAU,GAJG,E,+CAQnB,SAAYC,GACR,IAAMC,EAASC,KAAKP,MAAMC,MAAMO,QAChCD,KAAKP,MAAMI,SAAWE,EAAOD,GAAK,IAAMC,EAAOD,GAAK,IACpDE,KAAKE,SAAS,CAAER,MAAQK,EACRF,UAAYG,KAAKP,MAAMI,a,0BAG3C,SAAaC,GAAG,IAAD,OACX,OACA,cAACX,EAAD,CAAQI,IAAKS,KAAKP,MAAMC,MAAMI,GAAIR,QAAS,kBAAM,EAAKa,YAAYL,Q,oBAItE,WACI,OACA,eAACM,EAAA,EAAD,CAAWC,MAAM,OAAjB,UACI,eAACC,EAAA,EAAD,WACI,+CACA,+JAIA,4BACI,cAACC,EAAA,EAAD,CAAQC,QAAQ,UAAhB,6BAGR,cAACC,EAAA,EAAD,CAAKC,UAAU,4BAAf,SACI,cAACC,EAAA,EAAD,CAAKC,GAAG,OAAR,SACI,sBAAKvB,MAAM,aAAX,UACKW,KAAKa,aAAa,GAClBb,KAAKa,aAAa,GAClBb,KAAKa,aAAa,GAClBb,KAAKa,aAAa,GAClBb,KAAKa,aAAa,GAClBb,KAAKa,aAAa,GAClBb,KAAKa,aAAa,GAClBb,KAAKa,aAAa,GAClBb,KAAKa,aAAa,iB,GA9CJC,IAAMC,WCHvCC,G,MAAa,CAAC,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,IAQXC,MANf,WACE,OACE,cAAC,EAAD,CAAWC,UAAWF,KCGXG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.39754ac9.chunk.js","sourcesContent":["import './styles/gameboard.css';\n\nexport default function Square(props){\n    return <button class=\"box\" onClick={props.onClick}> {props.val} </button>\n}","import './styles/gameboard.css';\nimport { Container, Jumbotron, Button, Row, Col }from 'react-bootstrap';\nimport React from 'react';\nimport Square from './Square';\n\n\nexport default class Gameboard extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n          value: Array(9).fill(null),\n          isXsTurn: true,\n        }\n    }\n\n    handleClick(i){\n        const square = this.state.value.slice();\n        this.state.isXsTurn ? square[i] = 'X' : square[i] = 'O';\n        this.setState({ value : square, \n                        isXsTurn: !(this.state.isXsTurn) });\n    }\n\n    renderSquare(i){\n        return(\n        <Square val={this.state.value[i]} onClick={() => this.handleClick(i)}/> \n        )\n    }\n\n    render(){\n        return(\n        <Container fluid=\"true\">\n            <Jumbotron>\n                <h1>Hello, world!</h1>\n                <p>\n                    This is a simple hero unit, a simple jumbotron-style component for calling\n                    extra attention to featured content or information.\n                </p>\n                <p>\n                    <Button variant=\"primary\">Learn more</Button>\n                </p>\n            </Jumbotron>\n            <Row className=\"justify-content-md-center\">\n                <Col md=\"auto\">\n                    <div class=\"game-board\">\n                        {this.renderSquare(1)}\n                        {this.renderSquare(2)}\n                        {this.renderSquare(3)}\n                        {this.renderSquare(4)}\n                        {this.renderSquare(5)}\n                        {this.renderSquare(6)}\n                        {this.renderSquare(7)}\n                        {this.renderSquare(8)}\n                        {this.renderSquare(9)}\n                    </div>\n                </Col>\n            </Row>\n        </Container>\n    )};\n}","import Gameboard from './components/Gameboard';\nimport './App.css';\n\nconst SELECTIONS = [1, 2, 3,\n                    4, 5, 6,\n                    7, 8, 9];\n\nfunction App() {\n  return (\n    <Gameboard gameArray={SELECTIONS}/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}